<?php
function projecttabs_form_views_exposed_form_alter(&$form, $form_state) {
	$filters = array('group_nid', 'type');
	foreach($filters as $f) {
		if(isset($form[$f]['#options']['All'])) {
			$form[$f]['#options']['All'] = '--';  // the value seems hardcoded since translating it didn't help
		}
	}
}

/**
 * Implements hook_views_api().
 * @return array with Views API version.
 */
function projecttabs_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'projecttabs'),
  );
}

function projecttabs_menu() {
	$items['users-you-might-know'] = array(
		'title' => 'Mitglieder die Sie kennen könnten',
		'type' => MENU_CALLBACK,
		'page callback' => 'projecttabs_users_you_might_know_callback',
		'access arguments' => TRUE,
	);
	return $items;
}

function projecttabs_users_you_might_know_callback() {
	return '<div id="block-projecttabs-2">' . projecttabs_users_you_might_know(1, 20) . '</div>';
}

/**
 * Implements hook_menu_alter()
 * Changes tab navigation translations and restrict access
 *
 * @param array $items
 */
function projecttabs_menu_alter(&$items) {
	// translations
	$items['node/%node/view']['title'] = t('Aktuelles', NULL, 'de');
	$items['user/%user/view']['title'] = t('Profil', NULL, 'de');
	$items['user/%user/track']['title'] = t('Aktivitäten', NULL, 'de');
	$items['user/%user_category/edit']['weight'] = 10;
	$items['relationships/list']['title'] = t('Meine Kontakte', NULL, 'de');
	$items['relationships/requests']['title'] = t('Kontaktanfragen', NULL, 'de');
	$items['relationships/1']['title'] = t('Nutzer suchen', NULL, 'de');

	if(isset($items['search/apachesolr_search/%menu_tail']) && $items['search/apachesolr_search/%menu_tail']['title'] == 'Content') {
		$items['search/apachesolr_search/%menu_tail']['title'] = t('Alle Ergebnisse', NULL, 'de');;
	}

	// disable tabs (and the urls) for the user profile
	// use the following to remove the tab but let the URL
	// $items['user/%user/example']['type'] = MENU_CALLBACK;
	//$items['user/%user/contact'] = null;
	$items['user/%user/invites'] = null;
	$items['user/%user/messages'] = null;
	$items['user/%user/notifications'] = null;
	$items['og/activity'] = null;
	$items['user/%user_category/edit']['type'] = MENU_CALLBACK;
	//$items['node/%node/edit']['type'] = MENU_CALLBACK;
	$items['user/%user/contact']['type'] = MENU_CALLBACK;

	// profileplus adds it own user search tab
	if(module_exists('profileplus')) {
		$items['search/user/%menu_tail'] = null;
	}

	// disable tabs for anonymous
	global $user;
	if(!$user->uid) { // not logged in
		$items['user/%user/track'] = null;
	}
}

/**
 * Implements hook_block().
 * Adds the following custom blocks:
 *  - front page status, i.e. 'You have 2 new messages' etc.
 *  - custom login: shows login box for anonymous, profile information for logged in users
 *
 * @param string $op
 * @param int $delta
 * @param array $edit
 * @return string
 */
function projecttabs_block($op = 'list', $delta = 0, $edit = array()) {
	switch ($op) {
		case 'list':
			$blocks[0]['info'] = 'Balance ' . t('Frontpage Status');
			$blocks[1]['info'] = 'Balance ' . t('User');
			$blocks[2]['info'] = 'Balance ' . t('Users You Might Know');
			return $blocks;

		case 'view':
			switch($delta) {
				case 0:
					$block['content'] = projecttabs_user_block_content();
				break;

				case 1:
					$block['content'] = projecttabs_frontpage_status_block_content();
				break;

				case 2:
					$block['subject'] = t('Mitglieder die Sie kennen könnten', NULL, 'de');
					$block['content'] = projecttabs_users_you_might_know_block_content();
				break;
			}

			return $block;
	}
}

/**
 * @return string
 */
function projecttabs_user_block_content() {
	return theme_item_list(projecttabs_get_approvable_actions());
}

/**
 * @return string
 */
function projecttabs_frontpage_status_block_content() {
	global $user;
	$user = user_load($user->uid);

	if($user->uid)  {
		$profile_completeness = projecttabs_get_profile_completeness();

		return sprintf('<p class="login_text">%s<strong>%s,<br />%s</strong></p><p>%s | %s</p>%s',
			theme('imagecache', 'userpic-1c-square', (empty($user->picture) ? 'dummy.jpg' : $user->picture)),
			t('Herzlich willkommen', NULL, 'de'),
			l(implode(' ', array($user->profile_firstname, $user->profile_lastname)), 'user/' . $user->uid),
			l(t('Abmelden', NULL, 'de'), 'logout'),
			l(t('Kontakte', NULL, 'de'), 'relationships'),
			$profile_completeness < 80 ? '<p>' . t('Ihr Profil ist zu !profile_completeness% ausgefüllt.', array('!profile_completeness' => $profile_completeness), 'de') . l(t('Vervollständigen Sie Ihr Profil', NULL, 'de') ,'user/' . $user->uid . '/edit') . '!</p>' : ''
		);
	} else  {
		return sprintf('<form action="/drupal/?q=user&amp;%s" method="post" id="user-login"><ul>
	    <li><label for="edit-name">%s:</label><input type="text" maxlength="60" name="name" id="edit-name" size="15" value="" class="form-text required" title="Name" /></li>
	    <li><label for="edit-pass">%s:</label><input type="password" maxlength="" name="pass" id="edit-pass" size="15" class="form-text required" title="Passwort" /></li></ul>
		<input type="submit" name="op" value="%s" class="form-submit" /><br>
		<div class="description"><a href="/drupal/?q=user/register" title="Create account">%s</a> | <a href="/drupal/?q=user/password" title="Retrieve lost password">%s?</a></div>
		<input type="hidden" name="form_id" id="edit-user-login" value="user_login" />
	</form>', 
		drupal_get_destination(),
		t('Name', NULL, 'de'),
		t('Passwort', NULL, 'de'),
		t('Login', NULL, 'de'),
		t('Registrieren', NULL, 'de'),
		t('Passwort vergessen', NULL, 'de'));
	}
}

/**
 * @return string
 */
function projecttabs_users_you_might_know_block_content() {
	return projecttabs_users_you_might_know(1, 3) . theme_more_link('users-you-might-know', t('Mehr User ansehen', NULL, 'de'));
}

/**
 * Show users the logged in user could know because of user relationships
 *
 * @param int $rtid
 *  Relationship type ID
 * @param int $max
 *  The amount of users to show on the block
 * @return string
 *  HTML representation of user item list
 */
function projecttabs_users_you_might_know($rtid = 1, $max = 3) {
	global $user;

	$user_rel = db_query('SELECT u.uid
	FROM {users} u
	LEFT JOIN {user_relationships} ur ON (u.uid = ur.requestee_id)
	WHERE ur.requester_id = %d
	  AND ur.rtid = %d
	  AND u.status <> 0
	GROUP BY u.uid
	ORDER BY COUNT(ur.requester_id) DESC', $user->uid, $rtid);

	$req_req_id_list = array();
	while($row = db_fetch_array($user_rel)) {
	  $req_req_id_list[] = (int)$row['uid'];
	}

	if(!empty($req_req_id_list)) {
		$req_req_id_list = implode(',', $req_req_id_list);
		// Get all of the current user's friends' friends and order by how many times they show up in the list.
		$user_rel_rel = db_query('SELECT u.uid
		FROM {users} u
	LEFT JOIN {user_relationships} ur ON (u.uid = ur.requestee_id)
		WHERE ur.requester_id IN (%s)
			AND u.uid NOT IN (%s)
		  AND ur.approved = 1
		  AND ur.rtid = %d
		  AND u.uid <> %d
		  AND u.status <> 0
		GROUP BY u.uid
		ORDER BY COUNT(ur.requester_id) DESC, RAND()
		LIMIT %d', $req_req_id_list, $req_req_id_list, $rtid, $user->uid, $max);

		$user_rel_rel_com = array();
		while ($value = db_fetch_array($user_rel_rel)) {
		  $user_rel_rel_com[] = $value['uid'];
		}
	}

	if(empty($req_req_id_list) || empty($user_rel_rel_com)) {
		// no connections => get random people
		$user_rel_rel = db_query('SELECT u.uid
		FROM {users} u
		LEFT JOIN {user_relationships} ur ON (u.uid = ur.requestee_id)
		WHERE u.uid <> %d
		  AND u.status <> 0
		GROUP BY u.uid
		ORDER BY RAND()
		LIMIT %d', $user->uid, $max);
		$user_rel_rel_com = array();
		while ($value = db_fetch_array($user_rel_rel)) {
		  $user_rel_rel_com[] = $value['uid'];
		}
	}

	foreach($user_rel_rel_com as $u) {
    $account = user_load(array('uid' => $u));
    $list[] = theme('user_picture', $account) .' '. theme('username', $account);
	}

	return theme('item_list', $list);
}

/**
 * Counts how many percent of a user profile is entered
 *
 * @return int
 */
function projecttabs_get_profile_completeness() {
	global $user;

	$filled_out = 0;
	$fields = -1; // agb never filled out

	foreach($user as $field_name => $value) {
		if($field_name == 'location' && is_array($value)) {
			$fields += count($value) - 4; // 4 location fields are never filled out by the user
			$filled_out += count(array_filter($value));
		} elseif(strpos($field_name, 'profile_') !== false) {
			$fields++;
			if($value) {
				$filled_out++;
			}
		}
	}

	if($fields > 0) {
		$percent = (int)round(($filled_out * 100)/$fields, -1);
	} else  {
		$percent = 100;
	}

	return $percent;
}

/**
 * Gets items you have to approve to show them on the front page
 *
 * @return array
 *   to use with theme_item_list
 */
function projecttabs_get_approvable_actions() {
	global $user;

	if(module_exists('user_relationships_ui')) {
		// gets pending relationship requests
		if($user_relationships_count = count(user_relationships_load(array('requestee_id' => $user->uid, 'approved' => FALSE)))) {
			$approve[] = l(format_plural($user_relationships_count, '1 new relationship request', '@count new relationship requests'), variable_get('user_relationships_requests_link', 'relationships/requests'), array('attributes' => array('class' => 'pending-relationships')));
		}
	}

	if(module_exists('og_invite')) {
		// gets invites to a group
		// og/all page view needs to be extended for multiple arguments
		if($og_invites = og_invite_load_pending()) {
			$approve[] = l(format_plural(count($og_invites), '1 new group invite', '@count new group invites'), 'og/all/' . implode(',', array_keys($og_invites)), array('attributes' => array('class' => 'pending-og-invite')));
		}
	}

	if(module_exists('rsvp')) {
		// gets invites to an appointment
		if($invitations = rsvp_load_invited(null, $user->uid)) {
			$invitationsCount = 0;

			foreach($invitations as $event) {
				foreach($event as $invitation) {
					if($invitation->response == 'none') {
						$invitationsCount++;
					}
				}
			}

			if($invitationsCount > 0) {
				if($invitationsCount == 1) {
					// send directly to accept page
					$onlyInvitation = reset(reset($invitations));
					$rsvpLink = 'rsvp/email/' . $onlyInvitation->hash . '/view';
				} else {
					// send to overview page
					$rsvpLink = 'user/' . $user->uid . '/rsvp';
				}

				$approve[] = l(format_plural($invitationsCount, '1 new appointment invite', '@count new appointment invites'), $rsvpLink, array('attributes' => array('class' => 'pending-event-invite')));
			}
		}
	}

	return $approve;
}

/**
 * Implements theme_breadcrumb
 * Disables breadcrumb
 *
 * @param array $breadcrumb
 * @return string
 */
function balance_breadcrumb($breadcrumb) {
	return '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @param array $form
 * @param string $form_state
 */
function projecttabs_form_comment_form_alter(&$form, &$form_state) {
	// no WYSIWYG for comment forms
	$form['comment_filter']['format'] = array();
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @param array $form
 * @param string $form_state
 */
function projecttabs_form_user_register_alter(&$form, &$form_state) {
  $form['Benutzerinformation']['#weight'] = -5;
  $form['og_register']['#title'] = t('Projekt auswählen', NULL, 'de');
	$form['submit']['#value'] = t('Neu registrieren', NULL, 'de');

	$agb = &$form['Benutzerinformation']['profile_agb'];
	$agb['#title'] = str_replace('AGB', l(t('AGB', NULL, 'de'), 'nutzungsbedingungenagb'), $agb['#title']);
	unset($agb['#description']);

	foreach($form['og_register']['og_register']['#options'] as &$o) {
		$o = strip_tags($o);
	}
}

/**
 * Implements hook_form_FORM_ID_alter().
 * @param array $form
 * @param string $form_state
 */
function projecttabs_form_user_profile_form_alter(&$form, &$form_state) {
	// remove unneeded tabs
	$disable = array(
		'contact',
		'locale',
		'messaging',
		'timezone',
	);

	foreach($disable as $d) {
		unset($form[$d]);
	}

	$form['locations']['#title'] = t('Adresse', NULL, 'de');

	// AGB field is only used on register
	unset($form['Benutzerinformation']['profile_agb']);
}

/**
 * Implements hook_links_alter
 *
 * Removes the "Read !username's latest blog entries" under a blog post
 *
 * @param array $links
 * @param array $node
 */
function projecttabs_link_alter(&$links, $node) {
	unset($links['blog_usernames_blog']);
}

/**
 * Loads CSS classes and authors depending on node type
 *
 * @param array $vars
 */
function projecttabs_preprocess_page(&$vars) {
	$url = arg();
	if($url[0] == 'user') {
		if($url[1] && !in_array($url[1], array('register', 'password'))) {
			// user page
			$profile = user_load($url[1]);
			$vars['profile'] = $profile;
		} else {
			// default template for register/password forgot
			$vars['template_files'] = array('page');
		}
	} elseif(isset($vars['node']->type)) {
		switch($vars['node']->type) {
			case 'blog':
			case 'event':
				// set authors and groups of active blog post
				$authors[] = user_load($vars['node']->uid);
				$vars['authors'] = $authors;
			break;
		}
		$vars['body_classes'] = projecttabs_get_body_classes($vars['node'], $vars['body_classes']);
	}
}

/**
 * Implements hook_preprocess_node().
 * 
 * @param array
 */
function balance_preprocess_node(&$vars) {
	// put read more link in own variable
	if(isset($vars['node']->links['node_read_more'])) {
		$l = $vars['node']->links['node_read_more'];
		$vars['node_read_more'] = l($l['title'], $l['href'], $l);
	}

	$links = array();
	// remove all unnecessary links in nodes from $links
	if(isset($vars['node']->links['comment_add'])) {
		$links[] = $vars['node']->links['comment_add'];
	}
	if(isset($vars['node']->links['flag-gefallen'])) {
		$links[] = $vars['node']->links['flag-gefallen'];
	}
	$vars['links'] = theme('links', $links, array('class'=>'links inline'));
}

/**
 * Adds body classes for node
 *
 * @param StdClass $node
 * @param string $body_classes
 * @return string
 */
function projecttabs_get_body_classes($node, $body_classes = '') {
	if(!$node) {
		return $body_classes;
	}

	$body_classes = explode(' ', $body_classes);

	// on some pages the automatic drupal body class algorithm doesn't work properly
	// this is especially the case for views which are children of a group, e.g. project/name/info
	if($node->type) {
		$body_classes[] = 'node-type-' . $node->type;
	}

	return implode(' ', array_unique($body_classes));
}
